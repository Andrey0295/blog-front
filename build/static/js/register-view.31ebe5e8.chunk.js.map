{"version":3,"sources":["views/RegisterView.js"],"names":["SignupSchema","Yup","shape","email","required","password","RegisterForm","state","handleChange","target","name","value","setState","handleSubmit","e","onRegister","props","preventDefault","onInputFocus","isError","resetError","this","className","role","initialValues","validationSchema","errors","touched","isValidating","onSubmit","type","onFocus","onChange","placeholder","minLength","Component","connect","authSelectors","getErrorData","dispatch","data","authOperations","register","authAction"],"mappings":"gOASMA,EAAeC,MAAaC,MAAM,CACtCC,MAAOF,MAAaE,MAAM,iBAAiBC,SAAS,YACpDC,SAAUJ,MAAaE,MAAM,oBAAoBC,SAAS,cAGtDE,E,4MACJC,MAAQ,CACNJ,MAAO,GACPE,SAAU,I,EAUZG,aAAe,YAAkC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAChC,EAAKC,SAAL,eAAiBF,EAAOC,K,EAG1BE,aAAe,SAAAC,GACb,IAAQC,EAAe,EAAKC,MAApBD,WACRD,EAAEG,iBAEFF,EAAW,EAAKR,OAEhB,EAAKK,SAAS,CAAET,MAAO,GAAIE,SAAU,M,EAGvCa,aAAe,WACb,MAAgC,EAAKF,MAA7BG,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,WACbD,GACFC,K,0DAvBJ,WACE,MAAgCC,KAAKL,MAA7BG,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,WACbD,GACFC,M,oBAwBJ,WAAU,IAAD,OACCD,EAAYE,KAAKL,MAAjBG,QACR,EAA4BE,KAAKd,MAAzBJ,EAAR,EAAQA,MAAOE,EAAf,EAAeA,SACf,OACE,gCACE,mDAECc,GACC,qBAAKG,UAAU,qBAAqBC,KAAK,QAAzC,SACGJ,IAIL,cAAC,IAAD,CACEK,cAAe,CACbrB,MAAO,GACPE,SAAU,IAEZoB,iBAAkBzB,EALpB,SAOG,gBAAG0B,EAAH,EAAGA,OAAH,EAAWC,QAAX,EAAoBC,aAApB,OACC,eAAC,IAAD,CAAMC,SAAU,EAAKhB,aAArB,UACE,qBAAKS,UAAU,oBAAf,SACE,wBAAOA,UAAU,aAAjB,kBAEE,cAAC,IAAD,CACEZ,KAAK,QACLoB,KAAK,QACLnB,MAAOR,EACP4B,QAAS,EAAKb,aACdc,SAAU,EAAKxB,aACfc,UAAU,eACVW,YAAY,qBAEH,KAAV9B,EACC,8BACE,mBAAGmB,UAAU,eAAb,SAA6BI,EAAOvB,UAEpC,UAGR,qBAAKmB,UAAU,oBAAf,SACE,wBAAOA,UAAU,aAAjB,qBAEE,cAAC,IAAD,CACEZ,KAAK,WACLoB,KAAK,WACLnB,MAAON,EACP0B,QAAS,EAAKb,aACdc,SAAU,EAAKxB,aACfc,UAAU,eACVW,YAAY,mCACZC,UAAU,MAEE,KAAb7B,EACC,8BACE,mBAAGiB,UAAU,eAAb,SAA6BI,EAAOrB,aAEpC,UAGR,wBAAQyB,KAAK,SAASR,UAAU,4BAAhC,uC,GA9Faa,aAkHZC,uBATS,SAAA7B,GAAK,MAAK,CAChCY,QAASkB,IAAcC,aAAa/B,OAGX,SAAAgC,GAAQ,MAAK,CACtCxB,WAAY,SAAAyB,GAAI,OAAID,EAASE,IAAeC,SAASF,KACrDpB,WAAY,kBAAMmB,EAASI,IAAWvB,kBAGzBgB,CAA6C9B","file":"static/js/register-view.31ebe5e8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nimport authOperations from '../redux/auth/auth-operations';\nimport authSelectors from '../redux/auth/auth-selectors';\nimport authAction from '../redux/auth/auth-action';\n\nconst SignupSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email').required('Required'),\n  password: Yup.string().email('Invalid password').required('Required'),\n});\n\nclass RegisterForm extends Component {\n  state = {\n    email: '',\n    password: '',\n  };\n\n  componentWillUnmount() {\n    const { isError, resetError } = this.props;\n    if (isError) {\n      resetError();\n    }\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    const { onRegister } = this.props;\n    e.preventDefault();\n\n    onRegister(this.state);\n\n    this.setState({ email: '', password: '' });\n  };\n\n  onInputFocus = () => {\n    const { isError, resetError } = this.props;\n    if (isError) {\n      resetError();\n    }\n  };\n\n  render() {\n    const { isError } = this.props;\n    const { email, password } = this.state;\n    return (\n      <div>\n        <h1>Registration page</h1>\n\n        {isError && (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            {isError}\n          </div>\n        )}\n\n        <Formik\n          initialValues={{\n            email: '',\n            password: '',\n          }}\n          validationSchema={SignupSchema}\n        >\n          {({ errors, touched, isValidating }) => (\n            <Form onSubmit={this.handleSubmit}>\n              <div className=\"form-outline mb-4\">\n                <label className=\"form-label\">\n                  Email\n                  <Field\n                    name=\"email\"\n                    type=\"email\"\n                    value={email}\n                    onFocus={this.onInputFocus}\n                    onChange={this.handleChange}\n                    className=\"form-control\"\n                    placeholder=\"Enter your email\"\n                  />\n                  {email === '' ? (\n                    <div>\n                      <p className=\"text-danger \">{errors.email}</p>\n                    </div>\n                  ) : null}\n                </label>\n              </div>\n              <div className=\"form-outline mb-4\">\n                <label className=\"form-label\">\n                  Password\n                  <Field\n                    name=\"password\"\n                    type=\"password\"\n                    value={password}\n                    onFocus={this.onInputFocus}\n                    onChange={this.handleChange}\n                    className=\"form-control\"\n                    placeholder=\"Enter password (at least 6 symb)\"\n                    minLength=\"6\"\n                  />\n                  {password === '' ? (\n                    <div>\n                      <p className=\"text-danger \">{errors.password}</p>\n                    </div>\n                  ) : null}\n                </label>\n              </div>\n              <button type=\"submit\" className=\"btn btn-primary btn-block\">\n                Registration\n              </button>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isError: authSelectors.getErrorData(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRegister: data => dispatch(authOperations.register(data)),\n  resetError: () => dispatch(authAction.resetError()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterForm);\n"],"sourceRoot":""}